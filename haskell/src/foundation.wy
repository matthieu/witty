def module name body (
  primitive 'module'
)

def import name (
  primitive 'import'
)

// Witty in witty. Provides functions to manipulate Witty code.
module Meta (

  // Returns true if the provided expression is a function application, false 
  // otherwise.
  def applic? expression (
    primitive 'applic?'
  )

  // Returns the function name in the provided application. Raises an ArgumentError
  // if the argument isn't a function application or if it has no obvious name (i.e.
  // anonymous lambda)
  def fnName expression (
    primitive 'fnName'
  )

  // Returns a list of parameters provided to an application. Raises an ArgumentError
  // if the argument isn't a function application.
  def params expression (
    primitive 'params'
  )

  // Returns the nth parameter provided to an application. Raises an ArgumentError
  // if the argument isn't a function application.
  def nthParam expression idx (
    primitive 'nthParam'
  )
)

module Foundation (

  def macrop exp priority body (
    primitive 'macrop'
  )

  def lambda parameters~ body (
    primitive 'lambda'
  )

  def (`) expr (
    primitive '`'
  )
  
  macrop (macro `exp `body) 10 ((`) (macrop $exp 10 $body))

  macro (macrox `exp `body) ((`) (macrop $exp 10 ((`) $body)))

  macro (macropx `exp `priority `body) ((`) (macrop $exp $priority ((`) $body)))

  import Meta

  // Applies a named function with provided arguments. The function name
  // can either be a string or a symbol. Arguments can be specified eiter
  // directly or as an array.
  //   ex: apply(+, [1, 2]) -> 3
  //       apply(split, "192.168.1.1", ".") -> ["192", "168", "1", "1"]
  def apply fn params~ (
    primitive 'apply'
  )

  // Evaluates a string as a witty expression, returning its result.
  def eval s (
    primitive 'eval'
  )

  // Evaluates a literal witty expression.
  //   ex: evalWy(`(null)) -> null
  //       evalWy(`(2+3))  -> 5
  def evalWy s (
    primitive 'evalWy'
  )

  // Accepts either a string or a symbol. Returns true if it corresponds
  // to a known binding in the current environment, false otherwise.
  def defined? expression (
    primitive 'defined?'
  )

  def empty? expression (
    primitive 'empty?'
  )

  // Comparison and arithmetic operators
  //

  def (==) lexpr rexpr (
    primitive '=='
  )

  def (!=) lexpr rexpr (
    primitive '!='
  )

  def (<) lexpr rexpr (
    primitive '<'
  )

  def (>) lexpr rexpr (
    primitive '>'
  )

  def (<=) lexpr rexpr (
    primitive '<='
  )

  def (>=) lexpr rexpr (
    primitive '>='
  )

  def (!) lexpr rexpr (
    primitive '!'
  )

  def (&&) lexpr rexpr (
    primitive '&&'
  )

  def (||) lexpr rexpr (
    primitive '||'
  )

  def (=) name value (
    primitive '='
  )

  def (+) lexpr rexpr (
    primitive '+'
  )

  def (-) lexpr rexpr (
    primitive '-'
  )

  def (*) lexpr rexpr (
    primitive '*'
  )

  def (/) lexpr rexpr (
    primitive '/'
  )

  // Arithmetic operators
  macrop (`a = `b) 1 (
    if (applic? a && fnName a == "@") (
      (`) ((@!) (($) (nthParam a 0))  (($) (nthParam a 1)) $b) 
    )(
      (`)((=) $a $b)
    )
  )
  macropx (`a += `b) 1 ($a = $a + $b)
  macropx (`a -= `b) 1 ($a = $a - $b)
  macropx (`a || `b) 2 ((||) $a $b)
  macropx (`a && `b) 3 ((&&) $a $b)
  macropx (`a == `b) 4 ((==) $a $b)
  macropx (`a != `b) 4 ((!=) $a $b)
  macropx (`a <= `b) 5 ((<=) $a $b)
  macropx (`a >= `b) 5 ((>=) $a $b)
  macropx (`a < `b) 5 ((<) $a $b)
  macropx (`a > `b) 5 ((>) $a $b)
  macropx (`a + `b) 6 ((+) $a $b)
  macropx (`a - `b) 6 ((-) $a $b)
  macropx (`a * `b) 7 ((*) $a $b)
  macropx (`a / `b) 7 ((/) $a $b)

  // Index-based acces in container data structures (lists, string, hashes). Standard 
  // parsing for foo.bar(baz) is foo.(bar(baz)). We want (foo.bar)(baz).
  macro (`arr . `idx) (
    if (applic? idx) (
      if (empty? (params idx)) (
        (`) ((@) $arr (($) (fnName idx)))
      )(
        (`) ( ((@) $arr (($) (fnName(idx)))) (($^) (params idx)) )
      )
    )(
      (`) ((@) $arr $idx)
    )
  )

  def (::) elmt list (
    primitive '::'
  )

  // Access to module definitions from outside
  macro (`mod :: `def) (
    if (applic? def) (
      if (empty? (params def)) (
        (`) ((::) $mod (($) (fnName def)))
      )(
        (`) ( ((::) $mod (($) (fnName def))) (($^) (params def)) )
      )
    )(
      (`) ((::) $mod $def)
    )
  )

  // Control structures
  //

  def if cond body contra (
    primitive 'if'
  )

  macrox (unless `cond `body `contra?)  (if ((!) $cond) $body $contra)

  def foldr fn init list (
    primitive 'foldr'
  )
  
  foldr1 = lambda fn arr (foldr fn (head arr) (tail arr))

  def foldl fn init list (
    primitive 'foldl'
  )

  foldl1 = lambda fn arr (foldl fn (head arr) (tail arr))

  map = lambda fn arr (foldr (lambda x ys ([fn(x)] + ys)) [] arr)

  for = lambda arr l (foldl (lambda acc x (l x)) null arr)

  def callcc fn (
    primitive 'callcc'
  )

  // Error handling
  //

  UnknownRef = { type: 'UnknownRef' }
  ArgumentError = { type: 'ArgumentError' }
  UserError = { type: 'UserError' }
  SysError = [UnknownRef, ArgumentError]

  def try body catches~ (
    primitive 'try'
  )

  def raise err (
    primitive 'raise'
  )

  macro (catch `err `var? `body?) (
    if (var != (`) null) ((`) [$err, lambda $var $body]) ((`) [$err, null])
  )

  // Data structures

  def L elmts~ (
    primitive 'L'
  )

  def M elmts~ (
    primitive 'M'
  )

  def (@) list elmt (
    primitive '@'
  )

  def (<<) list elmt (
    primitive '<<'
  )
  macropx (`a << `b) 1 ((<<) $a $b)

  def (>>) elmt list (
    primitive '>>'
  )
  macropx (`a >> `b) 1 ((>>) $a $b)

  def (@!) ref val (
    primitive '@!'
  )

  def push! list val (
    primitive 'push!'
  )

  def length l (
    primitive 'length'
  )

  head = lambda a (a.0)

  tail = lambda a (slice a 1)

  def toS elmt (
    primitive 'toS'
  )

  def slice list start end (
    primitive 'slice'
  )

  def reverse l (
    primitive 'reverse'
  )

  join = lambda arr sep? ( 
    foldl1 (
      lambda a b (if sep (a + sep + b) (a + b))
    ) arr
  )
  
  split = lambda str sep (
    if (empty? str) (
      [""]
    )(
      if (head str == sep) (
        [""] + split (tail str) sep
      )(
        rest = split (tail str) sep
        [head str + head rest] + tail rest
      )
    )
  )

  // IO

  def print elmts~ (
    primitive 'print'
  )

  def load f (
    primitive 'load'
  )

  def arguments (
    primitive 'arguments'
  )

  def exit (
    primitive 'exit'
  )
)

import Foundation

module FileIO (
  // Returns true if the provided directory path exists and points to a directory, false otherwise.
  def dirExist? dir (
    primitive 'dirExist?'
  )
  
  // Returns true if the provided file path exists and points to a file, false otherwise.
  def fileExist? file (
    primitive 'fileExist?'
  )

  // Reads the whole content of file into a string.
  def readFile file (
    primitive 'readFile'
  )
  
  // Writes the string cnt to file. If file already existed, it is overwritten.
  def writeFile file cnt (
    primitive 'writeFile'
  )
  
  // Appends the string cnt to file, creating the file if it doesn't exist.
  def appendFile file cnt (
    primitive 'appendFile'
  )

  // Deletes a file from the filesystem.
  def deleteFile file (
    primitive 'deleteFile'
  )
)

module Meta (
  // Meta returns

  // Returns an array of statements from the provided block. If the provided argument 
  // is already an expression, returns it in an array. If it's neither a block, nor
  // an array, raises an ArgumentError.
  def splitBlock expression (
    primitive 'splitBlock'
  )

  // Iterates on the statements in the provided block by calling the one-parameter
  // lambda for each of them. Just calls the lambda once if the expression is a
  // single statement. Raises an ArgumentError otherwise.
  def eachStmt expression l (
    for (splitBlock expression) l
  )

  // Returns an array of statement compounds (ids, literals or applications) from 
  // the provided statement. Raises an ArgumentError if the expression isn't a
  // statement.
  def splitStmt expression (
    primitive 'splitStmt'
  )

  // Iterates on the compound in the provided statement by calling the one-parameter
  // lambda for each of them. Raies an ArgumentError if the expression isn't a
  // statement.
  def eachCompound expression (
    for (splitStmt expression) l
  )

  // Returns true if the provided expression is an identifier, false otherwise.
  def identifier? expression (
    primitive('identifier?')
  )
  
  // Returns the provided identifier as a string. Raises an ArgumentError if the
  // expression isn't an identifier.
  def identifier expression (
    primitive('identifier')
  )
)
