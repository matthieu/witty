verbose = ARGS().0 == "-v"
descriptions = []

macrox (describe `str `descBody) (
  (lambda (
    cases = []
    before = null

    macrox (before `freq `befBody) (
      if ($freq == "each") (before = lambda $befBody)
    )

    macrox (it `desc `itBody) (
      push! cases [$desc, lambda $itBody]
    )

    $descBody
    
    push! descriptions ["describe", $str, before, cases]
  ))()
)

load "test/arithmetics.wy"
load "test/string.wy"
load "test/list.wy"
load "test/map.wy"
load "test/stdlib.wy"
load "test/control.wy"
load "test/lambda.wy"
load "test/macro.wy"
load "test/module.wy"
load "test/fileio.wy"

failures = []
testCount = 0

for descriptions (lambda desc (
  if verbose (print (desc.1))

  for (desc.3) (lambda case (
    caseBody = case.1
    if (desc.2) (
      bef = desc.2
      bef()
    )
    success = try (
      caseBody()
    )( catch SysError se (
      print (se.source) ':' (se.line) ':' (se.column) ' ' (se.message)
      false
    ))
    if verbose (print ("  " + case.0 + " -> " + if success "OK" "FAILED"))
    testCount += 1
    unless success (push! failures (desc.1 + " " + case.0))
  ))
))

print ("\n" + testCount + " tests were executed.")
if (length failures > 0) (
  print ("There were " + length failures + " failure(s)!")
  for failures (lambda f (print ("  " + f)))
)
