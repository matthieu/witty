verbose = arguments().0 == "-v"
descriptions = []

macro(describe(`str, `descBody), `(
  lambda(
    cases = []
    before = null

    macro(before(`freq, `befBody), `(
      if($freq == "each", before = lambda($befBody))
    ))

    macro(it(`desc, `itBody), `(
      cases << [$desc, lambda($itBody)]
    ))

    $descBody
    
    descriptions << ["describe", $str, before, cases]

  )()
))

load("test/arithmetics.wy")
load("test/string.wy")
// load("test/list.wy")
// load("test/hash.wy")
// load("test/stdlib.wy")
// load("test/control.wy")
// load("test/lambda.wy")
// load("test/macro.wy")
// load("test/package.wy")


failures = []
testCount = 0

for(descriptions, lambda(desc,
  if(verbose, print(desc.1))
  for(desc.3, lambda(case,
    caseBody = case.1
    if (desc.2,
      bef = desc.2
      bef()
    );
    success = caseBody()
    if(verbose, print("  " + case.0 + " -> " + if(success, "OK", "FAILED")))
    testCount += 1
    if(!(success), failures << desc.1 + " " + case.0)
  ))
))

print("\n" + testCount + " tests were executed.")
if(length(failures) > 0,
  print("There were " + length(failures) + " failure(s)!")
  for(failures, lambda(f, print("  " + f)))
)
