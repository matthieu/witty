verbose = arguments().0 == "-v"
descriptions = L()

macro(describe(`str, `descBody), `(
  lambda(
    cases = L()
    before = null
 
    macro(before(`freq, `befBody), `(
      if($freq == "each", before = lambda($befBody))
    ))
    macro(it(`desc, `itBody), `(
      push(cases, L($desc, lambda($itBody)))
    ))
    $descBody

    push(descriptions, L("describe", $str, before, cases));
  )()
))

load("test/arithmetics.wy")
load("test/string.wy")
load("test/list.wy")
load("test/hash.wy")
load("test/stdlib.wy")
load("test/control.wy")
load("test/lambda.wy")
load("test/macro.wy")
load("test/package.wy")

failures = L()
testCount = 0
for(descriptions, lambda(desc,
  if(verbose, print(desc.1))
  for(desc.3, lambda(case,
    caseBody = case.1
    if (desc.2,
      bef = desc.2
      bef()
    )
    success = caseBody()
    if(verbose, print("  " + case.0 + " -> " + if(success, "OK", "FAILED")))
    testCount += 1
    if(!success, push(failures, desc.1 + " " + case.0))
  ))
))

print("\n" + testCount + " tests were executed.")
if(length(failures) > 0,
  print("There were " + length(failures) + " failure(s)!")
  for(failures, lambda(f, print("  " + f)))
)

// x to define regexps with no quoting
// think of how to make functions like toString or + work on user provided structures
// hygiene
// degrade gracefully in a web browser
// generalized variables
// cond/case with partner matching: cond([], true, [x], x, [x, rest\], ...)
// optional function parameters, parameters with default values
// provide primitives allowing read/write access to witty code so code can be created or altered directly
// basic list operations (push, pop, ...)
// real exceptions with script line error numbers
// pretty printer for all data types, including lambda, macro and package
// assign with := returns old value to allow a = b := a (exchange value)
// single param lambdas syntax sugar: \(..)
// lambdas shortcut y(...) ?
// multiline strings
// anonymous recursive lambdas (aka anaphoric lambdas)
// macro including macros
// recursive macros
// function composition
// delay and force
// tail calls
// destructured assignment
