describe("List index retrieval",
  alist = L(3,4,"bar",6)
  m=1
  l = L(L(5), L(7))

  it("should access a value at index 0", alist@0 == 3)
  it("should access a value at index 1", alist@1 == 4)
  it("should access a string value at index 2", alist@2 == "bar")
  it("should access a value at index 3", alist@3 == 6)
  it("should access a variable index value", alist@m == 4)
  it("should access a list value inside a list", l@1@0 == 7)
)

describe("List operations", 
  added = L(4,5) + L(7,8)
  subst = L(4,"foo",9,3) - L(3,"foo")
  it("should have correct elements after addition",
    added@0 == 4 && added@1 == 5 && added@2 == 7 && added@3 == 8
  )
  it("should have correct length after addition",
    length(added) == 4
  )
  it("should have correct elements after substraction",
    subst@0 == 4 && subst@1 == 9
  )
  it("should have correct length after addition",
    length(subst) == 2
  )
)

describe("List joining",
  it("should join a list using no separator", join(L("foo", "bar")) == "foobar")
  it("should join a list using a separator", 
    join(L(192, 168, 0 , 1), ".") == "192.168.0.1"
  )
)

describe("List length",
  it("should be 0 for an empty list", length(L()) == 0)
  it("should be 3 for a 3 elements list", length(L(1,2,3)))
)

describe("List map",
  add2 = lcurry(+, 2)
  it("should map a list with a function adding 2 to each element",
    newlist = map(L(1,2,3), add2)
    newlist@0 == 3 && newlist@1 == 4 && newlist@2 == 5
  ) 
  it("should conserve the original list length", length(map(L(4,5,6,7), add2)) == 4)
  it("should produce an empty list from an empty list", length(map(L(), add2)) == 0)
)

// Push
describe("List push",
  l = L(1,2)
  it("should increase the length by 1", length(push(l, "abc")) == 3)
  it("should add the right element at the last index", l@2 == "abc")
)

describe("List syntax sugar",
  alist = [3, "foo", 4.1]
  it("should allow access of a value at index 0", alist@0 == 3)
  it("should allow access of a value at index 1", alist@1 == "foo")
  it("should allow access of a value at index 2", alist@2 == 4.1)
  it("should have a proper length", length(alist) == 3)
)
