// Core primitives
//
def(macro, pattern, body,
  primitive('macro')
)

// Defining macrox as a shorthand form of macro where the body is always escaped.
macro(macrox(`exp, `body), 
  `(macro($exp, `($body)))
)

def(lambda, parameters\, body,
  primitive('lambda')
)

def(`, expr,
  primitive('`')
)

macrox(\(`exp), lambda(_, $exp))

def(defined?, name,
  primitive('defined?')
)

def(lcurry, fn, params\,
  primitive('lcurry')
)

def(rcurry, fn, params\,
  primitive('rcurry')
)

def(ncurry, fn, index, param,
  primitive('ncurry')
)

def(eval, expression,
  primitive('eval')
)

def(apply, function, params\,
  primitive('apply')
)

// Comparison and arithmetic operators
//
def(==, lexpr, rexpr,
  primitive('==')
)

def(!=, lexpr, rexpr,
  primitive('!=')
)

def(<, lexpr, rexpr,
  primitive('<')
)

def(>, lexpr, rexpr,
  primitive('>')
)

def(<=, lexpr, rexpr,
  primitive('<=')
)

def(>=, lexpr, rexpr,
  primitive('>=')
)

def(!, lexpr, rexpr,
  primitive('!')
)

def(&&, lexpr, rexpr,
  primitive('&&')
)

def(||, lexpr, rexpr,
  primitive('||')
)

def(=, name, value,
  primitive('=')
)

def(+, lexpr, rexpr,
  primitive('+')
)

def(-, lexpr, rexpr,
  primitive('-')
)

def(*, lexpr, rexpr,
  primitive('*')
)

def(/, lexpr, rexpr,
  primitive('/')
)

macro(`a = `b,
  if(applic?(a),
    if(applied(a) == "@", 
      `(@!($(nthParam(a, 0)), $(nthParam(a,1)), $b)) ),
    `(=($a, $b))
  )
)

macrox(`a += `b, $a = $a + $b)
macrox(`a -= `b, $a = $a - $b)

macrox(`a && `b, &&($a, $b))
macrox(`a || `b, ||($a, $b))

macrox(`a == `b, ==($a, $b))
macrox(`a != `b, !=($a, $b))
macrox(`a < `b, <($a, $b))
macrox(`a <= `b, <=($a, $b))
macrox(`a > `b, >($a, $b))
macrox(`a >= `b, >=($a, $b))
macrox(`a =~ `b, =~($a, $b))

macrox(`a + `b, +($a, $b))
macrox(`a - `b, -($a, $b))
macrox(`a * `b, *($a, $b))
macrox(`a / `b, /($a, $b))

// Expressions inspection
//
def(applic?, expression,
  primitive('applic?')
)

def(applied, application,
  primitive('applied')
)

def(params, application,
  primitive('params')
)

def(nthParam, application, index,
  primitive('nthParam')
)

def(isa, t1, t2,
  primitive('isa')
)

// Control and data structures
//

def(L, elements\,
  primitive('L')
)

def(H, elements\,
  primitive('H')
)

def(X, regexp, flags?,
  primitive('X')
)

def(if, predicate, consequence, opposite?,
  primitive('if')
)

def(for, listOrInit, lambdaOrStopCond, incrementExpr?, body?,
  primitive('for')
)

def(at, list, index,
  primitive('at')
)

def(@, list, index,
  primitive('@')
)

def(@!, list, index, value,
  primitive('@!')
)

// Standard parsing for foo.bar(baz) is foo.(bar(baz)). We want (foo.bar)(baz).
macro(`arr . `idx, 
  if(applic?(idx),
    if(empty?(params(idx)),
      `( @($arr, $(applied(idx)))() ),
      `( @($arr, $(applied(idx)))($<(params(idx))) )
    ),
    `(@($arr, $idx))
  )
)

def(join, list, separator?,
  primitive('join')
)

def(length, list,
  primitive('length')
)

def(empty?, list,
  primitive('empty?')
)

def(push, list, elmt,
  primitive('push')
)

def(pop, list,
  primitive('pop')
)

def(shift, list,
  primitive('shift')
)

def(unshift, list, elmt,
  primitive('unshift')
)

def(map, list, fn,
  primitive('map')
)

def(split, string, separator?, max?,
  primitive('split')
)

def(=~, string, regexp,
  primitive('=~')
)

def(search, string, regexp,
  primitive('search')
)

def(match, string, regexp,
  primitive('match')
)

// Error handling
//

def(try, body, catches\,
  primitive('try')
)

def(throw, error, message?,
  primitive('throw')
)

def(catch, error, var?, body?,
  primitive('catch')
)

def(catchAll, var?, body?,
  primitive('catchAll')
)

// Shell
//

def(prit, elements\,
  primitive('prit')
)

def(print, elements\,
  prit(elements\, "\n")
)

def(load, file,
  primitive('load')
)

def(arguments,
  primitive('arguments')
)

// Package management
//

def(package, name, body,
  primitive('package')
)

def(import, name,
  primitive('import')
)

def(::, package, definition,
  primitive('::')
)

macro(`pack :: `def, 
  if(applic?(def),
    if(empty?(params(def)),
      `( ::($pack, $(applied(def)))() ),
      `( ::($pack, $(applied(def)))($<(params(def))) )
    ),
    `(::($pack, $def))
  )
)

// TODO let with variable number of var/val pairs
macro(let(`var, `val, `block), `(lambda($var, $block)($val)))

LanguageErrors = [ReferenceError, NameError, CallError, TypeError]
